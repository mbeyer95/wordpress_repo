!/bin/bash

GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

WP_PATH="/var/www/html"

# Funktion für Fehlerbehandlung
error_exit() {
    echo -e "${RED}Fehler: $1${NC}" >&2
    exit 1
}

# Überprüfen, ob WordPress installiert ist
if [ ! -f "$WP_PATH/wp-config.php" ]; then
    error_exit "WordPress ist nicht installiert. Führen Sie zuerst das lokale Installationsscript aus."
fi

echo -e "${BLUE}=== WordPress Domain-Setup und Reverse Proxy Konfiguration ===${NC}"
echo -e "${YELLOW}Dieses Script stellt Ihre lokale WordPress-Installation auf eine öffentliche Domain um${NC}"
echo -e "${YELLOW}und konfiguriert sie für die Verwendung mit einem Reverse Proxy Manager.${NC}"
echo

# Aktuelle Konfiguration anzeigen
echo -e "${BLUE}Aktuelle WordPress-Konfiguration:${NC}"
CURRENT_SITEURL=$(grep "WP_SITEURL" $WP_PATH/wp-config.php | cut -d"'" -f4 2>/dev/null || echo "Nicht gefunden")
CURRENT_HOME=$(grep "WP_HOME" $WP_PATH/wp-config.php | cut -d"'" -f4 2>/dev/null || echo "Nicht gefunden")
echo -e "Aktuelle Site URL: ${GREEN}$CURRENT_SITEURL${NC}"
echo -e "Aktuelle Home URL: ${GREEN}$CURRENT_HOME${NC}"
echo

# Datenbank-Zugangsdaten aus wp-config.php lesen
DB_NAME=$(grep "DB_NAME" $WP_PATH/wp-config.php | cut -d"'" -f4)
DB_USER=$(grep "DB_USER" $WP_PATH/wp-config.php | cut -d"'" -f4)
DB_PASSWORD=$(grep "DB_PASSWORD" $WP_PATH/wp-config.php | cut -d"'" -f4)

if [ -z "$DB_NAME" ] || [ -z "$DB_USER" ] || [ -z "$DB_PASSWORD" ]; then
    error_exit "Konnte Datenbank-Zugangsdaten nicht aus wp-config.php lesen."
fi

# Neue Domain-Einstellungen abfragen
echo -e "${BLUE}Neue Domain-Einstellungen:${NC}"
read -p "Öffentliche Domain (z.B. example.com): " DOMAIN
if [ -z "$DOMAIN" ]; then
    error_exit "Domain darf nicht leer sein."
fi

read -p "Möchten Sie http oder https verwenden? [https]: " PROTOCOL
PROTOCOL=${PROTOCOL:-https}

# Reverse Proxy Manager Einstellungen
echo
echo -e "${BLUE}Reverse Proxy Manager Einstellungen:${NC}"
read -p "Haben Sie einen Reverse Proxy Manager? (j/n): " HAS_PROXY
if [[ "$HAS_PROXY" =~ ^[jJ]$ ]]; then
    read -p "IP-Adresse des Reverse Proxy Managers (z.B. 192.168.178.123: " PROXY_IP
    read -p "IP/Subnetz des Reverse Proxy (z.B. 192.168.178.123/24): " PROXY_SUBNET
    
    if [ -z "$PROXY_IP" ] || [ -z "$PROXY_SUBNET" ]; then
        error_exit "Proxy-IP und Subnetz dürfen nicht leer sein."
    fi
    
    USE_PROXY=true
    echo -e "Reverse Proxy wird konfiguriert für: ${GREEN}$PROXY_IP${NC}"
else
    USE_PROXY=false
    echo -e "${YELLOW}Kein Reverse Proxy Manager wird konfiguriert.${NC}"
fi

# E-Mail für Apache Virtual Host
read -p "E-Mail Adresse für den Apache Virtual Host: " EMAIL
if [ -z "$EMAIL" ]; then
    error_exit "E-Mail Adresse darf nicht leer sein."
fi

# Zusammenfassung anzeigen
echo
echo -e "${BLUE}=== Konfigurationsübersicht ===${NC}"
echo -e "Neue Domain: ${GREEN}$DOMAIN${NC}"
echo -e "Protokoll: ${GREEN}$PROTOCOL${NC}"
echo -e "Neue Site URL: ${GREEN}$PROTOCOL://$DOMAIN${NC}"
if [ "$USE_PROXY" = true ]; then
    echo -e "Reverse Proxy IP: ${GREEN}$PROXY_IP${NC}"
    echo -e "Reverse Proxy Subnetz: ${GREEN}$PROXY_SUBNET${NC}"
fi
echo -e "Admin E-Mail: ${GREEN}$EMAIL${NC}"
echo

read -p "Sind Sie sicher, dass Sie mit diesen Einstellungen fortfahren möchten? (j/n): " CONFIRM
if [[ ! "$CONFIRM" =~ ^[jJ]$ ]]; then
    echo "Vorgang abgebrochen."
    exit 0
fi

# Backup erstellen
echo -e "${BLUE}Erstelle Backup der aktuellen Konfiguration...${NC}"
BACKUP_DIR="/root/wordpress_backup_$(date +%Y%m%d_%H%M%S)"
mkdir -p $BACKUP_DIR
cp $WP_PATH/wp-config.php $BACKUP_DIR/
cp /etc/apache2/sites-available/wordpress.conf $BACKUP_DIR/ 2>/dev/null || true
echo -e "Backup erstellt in: ${GREEN}$BACKUP_DIR${NC}"
echo

# Apache Module aktivieren (falls noch nicht aktiviert)
echo -e "${BLUE}Aktiviere benötigte Apache Module...${NC}"
if [ "$USE_PROXY" = true ]; then
    a2enmod rewrite proxy proxy_http headers remoteip
else
    a2enmod rewrite headers
fi
echo

# WordPress wp-config.php aktualisieren
echo -e "${BLUE}Aktualisiere WordPress-Konfiguration...${NC}"
NEW_SITEURL="$PROTOCOL://$DOMAIN"
NEW_HOME="$PROTOCOL://$DOMAIN"

# Backup der wp-config.php
cp $WP_PATH/wp-config.php $WP_PATH/wp-config.php.backup

# Entferne alte WP_HOME und WP_SITEURL Definitionen
sed -i "/define('WP_HOME'/d" $WP_PATH/wp-config.php
sed -i "/define('WP_SITEURL'/d" $WP_PATH/wp-config.php
sed -i "/define('FORCE_SSL_ADMIN'/d" $WP_PATH/wp-config.php

# Entferne alte Proxy-Einstellungen
sed -i '/\/\* Proxy-Einstellungen \*\//,/^$/d' $WP_PATH/wp-config.php
sed -i '/\/\* Zusätzliche Proxy-Einstellungen \*\//,/^$/d' $WP_PATH/wp-config.php

# Neue Konfiguration hinzufügen
if [ "$USE_PROXY" = true ]; then
    # Mit Reverse Proxy
    sed -i "/\/\* That's all, stop editing! Happy publishing. \*\//i \
/* WordPress Domain und Proxy-Einstellungen */\n\
define('WP_MEMORY_LIMIT', '256M');\n\
define('WP_HOME', '$NEW_HOME');\n\
define('WP_SITEURL', '$NEW_SITEURL');\n\
define('FORCE_SSL_ADMIN', true);\n\
\n\
/* Reverse Proxy-Einstellungen */\n\
if (isset(\$_SERVER['HTTP_X_FORWARDED_PROTO']) && \$_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https') {\n\
    \$_SERVER['HTTPS'] = 'on';\n\
    \$_SERVER['SERVER_PORT'] = 443;\n\
}\n\
\n\
/* Zusätzliche Proxy-Einstellungen */\n\
if (isset(\$_SERVER['HTTP_X_FORWARDED_HOST'])) {\n\
    \$_SERVER['HTTP_HOST'] = \$_SERVER['HTTP_X_FORWARDED_HOST'];\n\
}\n\
" $WP_PATH/wp-config.php
else
    # Ohne Reverse Proxy
    sed -i "/\/\* That's all, stop editing! Happy publishing. \*\//i \
/* WordPress Domain-Einstellungen */\n\
define('WP_MEMORY_LIMIT', '256M');\n\
define('WP_HOME', '$NEW_HOME');\n\
define('WP_SITEURL', '$NEW_SITEURL');\n\
" $WP_PATH/wp-config.php
fi
echo

# Apache Virtual Host konfigurieren
echo -e "${BLUE}Konfiguriere Apache Virtual Host...${NC}"
if [ "$USE_PROXY" = true ]; then
    # Virtual Host mit Reverse Proxy Unterstützung
    cat > /etc/apache2/sites-available/wordpress.conf << EOF
<VirtualHost *:80>
    ServerAdmin $EMAIL
    DocumentRoot /var/www/html
    ServerName $DOMAIN
    ServerAlias www.$DOMAIN

    # Reverse Proxy-Einstellungen
    ProxyPreserveHost On
    RemoteIPHeader X-Forwarded-For
    RemoteIPInternalProxy $PROXY_SUBNET

    # Header für HTTPS
    <IfModule mod_headers.c>
        RequestHeader set X-Forwarded-Proto "https" env=HTTPS
    </IfModule>

    <Directory /var/www/html>
        Options FollowSymLinks
        AllowOverride All
        Require all granted
        
        # Zusätzliche Rewrite-Regeln für Proxy
        <IfModule mod_rewrite.c>
            RewriteEngine On
            RewriteCond %{HTTP:X-Forwarded-Proto} =https
            RewriteRule .* - [E=HTTPS:on,E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
        </IfModule>
    </Directory>

    ErrorLog \${APACHE_LOG_DIR}/error.log
    CustomLog \${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
EOF
else
    # Standard Virtual Host ohne Proxy
    cat > /etc/apache2/sites-available/wordpress.conf << EOF
<VirtualHost *:80>
    ServerAdmin $EMAIL
    DocumentRoot /var/www/html
    ServerName $DOMAIN
    ServerAlias www.$DOMAIN

    <Directory /var/www/html>
        Options FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>

    ErrorLog \${APACHE_LOG_DIR}/error.log
    CustomLog \${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
EOF
fi

# Wenn HTTPS verwendet wird, zusätzlichen Virtual Host für Port 443 erstellen
if [ "$PROTOCOL" = "https" ] && [ "$USE_PROXY" = false ]; then
    cat >> /etc/apache2/sites-available/wordpress.conf << EOF

<VirtualHost *:443>
    ServerAdmin $EMAIL
    DocumentRoot /var/www/html
    ServerName $DOMAIN
    ServerAlias www.$DOMAIN

    SSLEngine on
    # SSL-Zertifikat Pfade müssen hier konfiguriert werden
    # SSLCertificateFile /path/to/certificate.crt
    # SSLCertificateKeyFile /path/to/private.key

    <Directory /var/www/html>
        Options FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>

    ErrorLog \${APACHE_LOG_DIR}/error.log
    CustomLog \${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
EOF
fi

# Apache Konfiguration testen und neu laden
apache2ctl configtest
if [ $? -ne 0 ]; then
    error_exit "Apache Konfiguration ist fehlerhaft. Überprüfen Sie die Einstellungen."
fi

systemctl restart apache2
echo

# Datenbank aktualisieren
echo -e "${BLUE}Aktualisiere WordPress-Datenbank...${NC}"
mysql -u$DB_USER -p$DB_PASSWORD $DB_NAME <<EOF
UPDATE wp_options SET option_value='$NEW_SITEURL' WHERE option_name='siteurl';
UPDATE wp_options SET option_value='$NEW_HOME' WHERE option_name='home';
UPDATE wp_posts SET guid = REPLACE(guid, '$CURRENT_SITEURL', '$NEW_SITEURL') WHERE guid LIKE '%$CURRENT_SITEURL%';
UPDATE wp_posts SET post_content = REPLACE(post_content, '$CURRENT_SITEURL', '$NEW_SITEURL') WHERE post_content LIKE '%$CURRENT_SITEURL%';
UPDATE wp_postmeta SET meta_value = REPLACE(meta_value, '$CURRENT_SITEURL', '$NEW_SITEURL') WHERE meta_value LIKE '%$CURRENT_SITEURL%';
EOF

if [ $? -ne 0 ]; then
    error_exit "Fehler beim Aktualisieren der Datenbank."
fi
echo

# WordPress Cache leeren (falls vorhanden)
echo -e "${BLUE}Leere WordPress Cache...${NC}"
if command -v wp &> /dev/null; then
    cd $WP_PATH
    wp cache flush --allow-root 2>/dev/null || true
fi

# .htaccess-Datei erstellen/aktualisieren
echo -e "${BLUE}Erstelle/aktualisiere .htaccess-Datei...${NC}"
cat > $WP_PATH/.htaccess << 'EOF'
# BEGIN WordPress
<IfModule mod_rewrite.c>
RewriteEngine On
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
RewriteBase /
RewriteRule ^index\.php$ - [L]
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule . /index.php [L]
</IfModule>
# END WordPress
EOF

# Berechtigungen für .htaccess setzen
chown www-data:www-data $WP_PATH/.htaccess
chmod 644 $WP_PATH/.htaccess

# Permalinks neu setzen
echo -e "${BLUE}Setze Permalinks neu...${NC}"
if command -v wp &> /dev/null; then
    cd $WP_PATH
    wp rewrite structure '/%postname%/' --allow-root
    wp rewrite flush --allow-root
fi
echo

# Abschließende Informationen
echo -e "${BLUE}=== Domain-Setup erfolgreich abgeschlossen ===${NC}"
echo -e "Neue WordPress URL: ${GREEN}$NEW_SITEURL${NC}"
echo -e "WordPress Admin URL: ${GREEN}$NEW_SITEURL/wp-admin${NC}"
echo -e "WordPress Adminer URL: ${GREEN}$NEW_SITEURL/adminer${NC}"
echo

if [ "$USE_PROXY" = true ]; then
    echo -e "${BLUE}Reverse Proxy Manager Konfiguration:${NC}"
    echo -e "Proxy IP: ${GREEN}$PROXY_IP${NC}"
    echo -e "Proxy Subnetz: ${GREEN}$PROXY_SUBNET${NC}"
    echo -e "${YELLOW}Stellen Sie sicher, dass Ihr Reverse Proxy Manager korrekt konfiguriert ist:${NC}"
    echo -e "- Ziel-IP: $(hostname -I | awk '{print $1}')"
    echo -e "- Ziel-Port: 80"
    echo -e "- Domain: $DOMAIN"
    echo -e "- SSL/HTTPS: Aktiviert (falls gewünscht)"
    echo
fi

if [ "$PROTOCOL" = "https" ] && [ "$USE_PROXY" = false ]; then
    echo -e "${YELLOW}Hinweis für HTTPS ohne Reverse Proxy:${NC}"
    echo -e "Sie müssen SSL-Zertifikate installieren und die Apache SSL-Konfiguration vervollständigen."
    echo -e "Bearbeiten Sie /etc/apache2/sites-available/wordpress.conf und fügen Sie die SSL-Zertifikat-Pfade hinzu."
    echo
fi

echo -e "${BLUE}Backup der alten Konfiguration:${NC}"
echo -e "Backup-Verzeichnis: ${GREEN}$BACKUP_DIR${NC}"
echo
echo -e "${GREEN}Die Domain-Umstellung ist abgeschlossen!${NC}"
echo -e "${YELLOW}Testen Sie Ihre Website unter: $NEW_SITEURL${NC}"
